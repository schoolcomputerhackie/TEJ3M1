#region VEXcode Generated Robot Configuration
import math
import random
from vexcode_vr import *

# Brain should be defined by default
brain=Brain()

drivetrain = Drivetrain("drivetrain", 0)
pen = Pen("pen", 8)
pen.set_pen_width(THIN)
left_bumper = Bumper("leftBumper", 2)
right_bumper = Bumper("rightBumper", 3)
front_eye = EyeSensor("frontEye", 4)
down_eye = EyeSensor("downEye", 5)
front_distance = Distance("frontdistance", 6)
distance = front_distance
magnet = Electromagnet("magnet", 7)
location = Location("location", 9)

#endregion VEXcode Generated Robot Configuration

grid = 240

def print(value):
    brain.new_line()
    brain.print(value)

def m(d):
    global grid
    Turn = 0
    direction = RIGHT
    if d == 'u':
        Turn = 0
        currentpos[0] -= 1
    if d == 'r':
        Turn = 90
        currentpos[1] += 1
    if d == 'd':
        Turn = 180
        currentpos[0] += 1
    if d == 'l':
        Turn = 90
        direction = LEFT
    drivetrain.turn_for(direction, Turn, DEGREES)
    drivetrain.drive_for(FORWARD,grid,MM)
    direction = LEFT if direction == RIGHT else RIGHT
    drivetrain.turn_for(direction, Turn, DEGREES)

currentmaze = [
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0]
]

currentpos = [7,4]

def checkotherwalls():
    v1 = 0
    v2 = 0
    v3 = 0
    v4 = 0
    try:
        if currentmaze[currentpos[0]-1][currentpos[1]] == 0:
            v1 = None
        else:
            if currentmaze[currentpos[0]-1][currentpos[1]][2] == 1:
                v1 = 1
    except:
        v1 = None
    try:
        if currentmaze[currentpos[0]+1][currentpos[1]] == 0:
            v3 = None
        else:
            if currentmaze[currentpos[0]+1][currentpos[1]][0] == 1:
                v3 = 1
    except:
        v3 = None
    try:
        if currentmaze[currentpos[0]][currentpos[1]-1] == 0:
            v4 = None
        else:
            if currentmaze[currentpos[0]][currentpos[1]-1][2] == 1:
                v4 = 1
    except:
        v4 = None
    try:
        if currentmaze[currentpos[0]][currentpos[1]+1] == 0:
            v2 = None
        else:
            if currentmaze[currentpos[0]][currentpos[1]+1][3] == 1:
                v2 = 1
    except:
        v2 = None
    
    return [v1,v2,v3,v4]

def checkcurrentstate(value = None):
    # initialize the 4 variables
    v1 = 0
    v2 = 0
    v3 = 0
    v4 = 0

    # Set each value to its respective distance
    v1 = front_distance.get_distance(MM)
    drivetrain.turn_for(RIGHT, 90, DEGREES)
    v2 = front_distance.get_distance(MM)
    drivetrain.turn_for(RIGHT, 90, DEGREES)
    v3 = front_distance.get_distance(MM)
    drivetrain.turn_for(RIGHT, 90, DEGREES)
    v4 = front_distance.get_distance(MM)

    if value == None:
            v1 = 1 if v1 <= 65 else 0
            v2 = 1 if v2 <= 65 else 0
            v3 = 1 if v3 <= 65 or v3 > 2000 else 0
            v4 = 1 if v4 <= 65 else 0
    else:
        try:
            v1 = 1 if v1 <= 65 or value[0] == 1 else 0 # a wall should be no farther than 65 mm away
        except:
            print("v1 Failed")
        try:
            v2 = 1 if v2 <= 65 or value[1] == 1 else 0
        except:
            print("v2 Failed")
        try:
            v3 = 1 if v3 <= 65 or value[2] == 1 or v3 > 2000 else 0 # but if the distance is over 2000, set it to be a wall, because it most likely is the spawn area
        except:
            print("v3 Failed")
        try:
            v4 = 1 if v4 <= 65 or value[3] == 1 else 0
        except:
            print("v4 Failed")
    
    drivetrain.turn_for(RIGHT, 90, DEGREES)
    return [v1,v2,v3,v4]

def main():
    brain.clear()
    value = checkcurrentstate()
    if currentmaze[currentpos[0]][currentpos[1]] == 0:
        currentmaze[currentpos[0]][currentpos[1]] = value
    count = 0

    for i in value:
        if i == 1:
            count += 1
    if count == 3:
        if value[0] == 0:
            m('u')
        if value[1] == 0:
            m('r')
        if value[2] == 0:
            m('d')
        if value[3] == 0:
            m('l')
        currentmaze[currentpos[0]][currentpos[1]] = [1,1,1,1]
        value2 = checkotherwalls()
        checkcurrentstate(value2)

vr_thread(main)
