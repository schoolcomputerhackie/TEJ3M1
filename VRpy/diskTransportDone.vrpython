{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      shisk wansport\n#\tAuthor:       @abnormalitydancingirl\n#\tCreated:\n#\tDescription:  bad bad bad\n# \n# ------------------------------------------\n\n# fuck this stupid activity 10 / 10 done\n\n# create the disc matrix ; 1 = red, 2 = green, 3 = blue\nmatrix = [\n    [2, 2, 0, 0, 1, 1],\n    [1, 0, 0, 0, 0, 3],\n    [1, 0, 0, 0, 0, 3],\n    [3, 3, 0, 0, 2, 2]\n]\n\n# dropoff function\ndef dropoff(value):\n    if value == 1:\n        drivetrain.turn_for(LEFT, 180, DEGREES)\n        magnet.energize(DROP)\n        drivetrain.turn_for(RIGHT, 180, DEGREES)\n    elif value == 2:\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n        drivetrain.drive_for(FORWARD, 800, MM)\n        magnet.energize(DROP)\n        drivetrain.drive_for(REVERSE, 800, MM)\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n    elif value == 3:\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        drivetrain.drive_for(FORWARD, 800, MM)\n        magnet.energize(DROP)\n        drivetrain.drive_for(REVERSE, 800, MM)\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n# goto function\ndef goto(x, y):\n\n    # variables\n    color = matrix[y][x]\n\n    # debug messages (comment out)\n    brain.print(x, y)\n    brain.new_line()\n    brain.print(matrix[y][x])\n    brain.new_line()\n    brain.print(\"====================\")\n    brain.new_line()\n\n    # drive to middle\n    drivetrain.drive_for(FORWARD, 900, MM)\n\n    # checks\n    if x in range(0, 3):\n        side = \"left\"\n        direction = LEFT\n        inversedirection = RIGHT\n        rel = (2, 2) # relative point for left side\n    else:\n        side = \"right\"\n        direction = RIGHT\n        inversedirection = LEFT\n        rel = (2, 3) # relative point for right side\n\n    # drive to relative point\n    drivetrain.turn_for(direction, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 100, MM)\n\n    # calculations\n    if direction == LEFT:\n        translateX = rel[1] - x\n        translateY = rel[0] - y\n        moveX = translateX * 200\n        moveY = translateY * 200\n    elif direction == RIGHT:\n        translateX =  x - rel[1]\n        translateY = rel[0] - y\n        moveX = translateX * 200\n        moveY = translateY * 200\n\n    # work\n    drivetrain.drive_for(FORWARD, moveX, MM)\n    drivetrain.turn_for(inversedirection, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, moveY, MM)\n\n    if moveY < 0:\n        drivetrain.turn_for(direction, 180, DEGREES)\n        magnet.energize(BOOST)\n        drivetrain.drive_for(REVERSE, 100, MM)\n        wait(0.1, SECONDS)\n        drivetrain.drive_for(FORWARD, 100, MM)\n        wait(0.1, SECONDS)\n        #drivetrain.drive_for(REVERSE, 100, MM)\n        drivetrain.turn_for(inversedirection, 180, DEGREES)\n        print(\"FUCKKKKK\")\n    else:\n        magnet.energize(BOOST)\n\n    # work inverse\n    drivetrain.drive_for(REVERSE, moveY, MM)\n    drivetrain.turn_for(direction, 90, DEGREES)\n    drivetrain.drive_for(REVERSE, moveX, MM)\n\n\n    # drive back to relative point\n    drivetrain.drive_for(REVERSE, 100, MM)\n    drivetrain.turn_for(inversedirection, 90, DEGREES)\n\n    # drive back and end (call dropoff)\n    drivetrain.drive_for(REVERSE, 900, MM)\n    dropoff(color)\n\n    wait(0.25, SECONDS)\n\ndef main():\n    for y in range(len(matrix)):\n        yValue = matrix[y]\n        for x in range(len(yValue)):\n            xValue = yValue[x]\n            if xValue == 0:\n                pass\n            else:\n                goto(x, y)\n\n    \n\n# VR threads â€” Do not delete\nvr_thread(main)","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"Magnet","robotModel":"vr","target":"Physical"}