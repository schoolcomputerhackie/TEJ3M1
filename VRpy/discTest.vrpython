{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\n# these measurement names piss me off\nbackwards = REVERSE\nstraight = FORWARD\nmm = MM\ns = SECONDS\nms = MSEC\ndeg = DEGREES\nleft = LEFT\nright = RIGHT\n\n# create the disc matrix ; 1 = red, 2 = green, 3 = blue\nmatrix = [\n    [2, 2, 0, 0, 1, 1],\n    [1, 0, 0, 0, 0, 3],\n    [1, 0, 0, 0, 0, 3],\n    [3, 0, 0, 0, 2, 2]\n]\n\n# create dropoff relative points\ncoords_rel1 = (0, 0)\ncoords_rel2 = (-800, 0)\ncoords_rel3 = (800, 0)\n\n# goto function\ndef goto(x, y):\n    # weed out the zero values\n    if x == 0:\n        return\n\n    # drive to relative point matrix[2][3]\n    drivetrain.drive_for(straight, 900, mm)\n    drivetrain.turn_for(left, 90, deg)\n    drivetrain.drive_for(straight, 100, mm)\n    drivetrain.turn_for(right, 90, deg)\n    wait(0.5, s)\n\n    # calculations\n    color = matrix[y][x]\n    block = 200 # mm\n    moveY = (2 - y) * 300\n    print(moveY)\n    moveX = (3 - x) * 300\n    print(moveX)\n\n    # define directions for x\n    if moveX < 0:\n        direction = left\n        altdirection = right\n    else:\n        direction = right\n        altdirection = left\n\n    # define directions for y\n    if moveY < 0:\n        translate = backwards\n        alttranslate = straight\n    else:\n        translate = straight\n        alttranslate = backwards\n\n    # move along the x axis\n    drivetrain.turn_for(direction, 90, deg)\n    drivetrain.drive_for(straight, abs(moveX), mm)\n\n    # turn based on altdirection\n    drivetrain.turn_for(altdirection, 90, deg)\n\n    # move along the y axis\n    drivetrain.drive_for(translate, abs(moveY), mm)\n    \n    # turn the magnet on\n    magnet.energize(BOOST)\n    \n\n# Add project code in \"main\"\ndef main():\n    valY = 0\n    for y in matrix:\n        for x in y:\n            goto(x, valY)\n        valY += 1\n\n# VR threads â€” Do not delete\nvr_thread(main)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"Magnet","robotModel":"vr","target":"Physical"}